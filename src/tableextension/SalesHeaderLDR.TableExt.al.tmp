tableextension 50220 SalesHeader_LDR extends " "Sales Header" "
{
    // IZERTIS 310317 OVM
    // New Code
    //   Assing Dim
    //   Validate User
    //   Assing User
    //   Assing DocDim
    //   Get VAT Prod Pos Group
    DataCaptionFields = "Document Type";
    fields
    {
        //Unsupported feature: Property Insertion (ValidateTableRelation) on ""Sell-to Customer No."(Field 2)".
        modify("Shortcut Dimension 1 Code")
        {
            TableRelation = "Dimension Value".Code WHERE(Global Dimension No.=CONST(1));
        }
        modify("Shortcut Dimension 2 Code")
        {
            TableRelation = "Dimension Value".Code WHERE(Global Dimension No.=CONST(2));
        }
        //Unsupported feature: Property Modification (Data type) on ""Salesperson Code"(Field 43)".
        modify("Gen. Bus. Posting Group")
        {
            Caption = 'Gen. Bus. Posting Group';
        }
        modify("Area")
        {
            Caption = 'Area';
        }
        modify("VAT Bus. Posting Group")
        {
            Caption = 'VAT Bus. Posting Group';
        }
        modify("Get Shipment Used")
        {
            Caption = 'Get Shipment Used';
        }
        modify("Invoice Type")
        {
            OptionCaption = 'F1 Invoice,F2 Simplified Invoice,F3 Invoice issued to replace simplified invoices,F4 Invoice summary entry';
            //Unsupported feature: Property Modification (OptionString) on ""Invoice Type"(Field 10707)".
        }
        //Unsupported feature: Code Insertion (VariableCollection) on ""Sell-to Customer No."(Field 2).OnValidate".
        //trigger (Variable: Opp)()
        //Parameters and return type have not been exported.
        //begin
        /*
        */
        //end;
        //Unsupported feature: Code Modification on ""Sell-to Customer No."(Field 2).OnValidate".
        //trigger "(Field 2)()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        CheckCreditLimitIfLineNotInsertedYet;
        TESTFIELD(Status,Status::Open);
        IF ("Sell-to Customer No." <> xRec."Sell-to Customer No.") AND
        #4..108
        "Shipping Advice" := Cust."Shipping Advice";
        "Responsibility Center" := UserSetupMgt.GetRespCenter(0,Cust."Responsibility Center");
        VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));
        IF "Sell-to Customer No." = xRec."Sell-to Customer No." THEN
          IF ShippedSalesLinesExist OR ReturnReceiptExist THEN BEGIN
            TESTFIELD("VAT Bus. Posting Group",xRec."VAT Bus. Posting Group");
        #116..139
        IF NOT SkipSellToContact THEN
          UpdateSellToCont("Sell-to Customer No.");
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        IF TRUE THEN;
        #1..111
        InitSii;
        #113..142
        //Begin --IZERTIS 310317 Assing DocDim
        //CARLOS COSME - informo dimensiones y valores por defecto al cambiar el cliente porque las vac´Š¢a
        CompanyInfo.GET;
        "Assigned User ID" := USERID;
        {
        DocumentDim.INIT;
        DocumentDim."Table ID" := 36;
        DocumentDim."Document Type" := "Document Type";
        DocumentDim."Document No." := "No.";
        DocumentDim."Line No." := 0;
        DocumentDim."Dimension Code" := 'PROYECTO';
        DocumentDim."Dimension Value Code" := UserDimensions.getProjectDim(USERID);
        IF DocumentDim.INSERT THEN ;
        "Shortcut Dimension 1 Code" := DocumentDim."Dimension Value Code";
        DocumentDim.INIT;
        DocumentDim."Table ID" := 36;
        DocumentDim."Document Type" := "Document Type";
        DocumentDim."Document No." := "No.";
        DocumentDim."Line No." := 0;
        DocumentDim."Dimension Code" := 'PROVINCIAS';
        DocumentDim."Dimension Value Code" := UserDimensions.getAreaDim(USERID);
        IF DocumentDim.INSERT THEN ;
        DocumentDim.INIT;
        DocumentDim."Table ID" := 36;
        DocumentDim."Document Type" := "Document Type";
        DocumentDim."Document No." := "No.";
        DocumentDim."Line No." := 0;
        DocumentDim."Dimension Code" := 'UNIDADES PRODUCCI´Š¢N';
        DocumentDim."Dimension Value Code" := UserDimensions.getDeptDim(USERID);
        IF DocumentDim.INSERT THEN ;
        DocumentDim.INIT;
        DocumentDim."Table ID" := 36;
        DocumentDim."Document Type" := "Document Type";
        DocumentDim."Document No." := "No.";
        DocumentDim."Line No." := 0;
        DocumentDim."Dimension Code" := 'SEGMENTO';
        DocumentDim."Dimension Value Code" := UserDimensions.getSegmentDim(USERID);
        IF DocumentDim.INSERT THEN ;
        "Shortcut Dimension 2 Code" := DocumentDim."Dimension Value Code";
        }
        //"Location Code" := UserDimensions.getLocationCode(USERID);
        //End --IZERTIS 310317 Assing Dim
        //001
        UserDims.SETRANGE(UserDims.Usuario,USERID);
        IF UserDims.FINDFIRST THEN
           "Location Code":= UserDims."Location Code";
        //001
        */
        //end;
        //Unsupported feature: Code Modification on ""Bill-to Customer No."(Field 4).OnValidate".
        //trigger "(Field 4)()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        TESTFIELD(Status,Status::Open);
        BilltoCustomerNoChanged := xRec."Bill-to Customer No." <> "Bill-to Customer No.";
        IF BilltoCustomerNoChanged THEN
        #4..94
        "Invoice Disc. Code" := Cust."Invoice Disc. Code";
        "Customer Disc. Group" := Cust."Customer Disc. Group";
        "Language Code" := Cust."Language Code";
        SetSalespersonCode(Cust."Salesperson Code","Salesperson Code");
        "Combine Shipments" := Cust."Combine Shipments";
        Reserve := Cust.Reserve;
        IF "Document Type" = "Document Type"::Order THEN
        #102..110
        END;
        CreateDim(
          DATABASE::Customer,"Bill-to Customer No.",
          DATABASE::"Salesperson/Purchaser","Salesperson Code",
          DATABASE::Campaign,"Campaign No.",
          DATABASE::"Responsibility Center","Responsibility Center",
        #118..133
        "Bill-to IC Partner Code" := Cust."IC Partner Code";
        "Send IC Document" := ("Bill-to IC Partner Code" <> '') AND ("IC Direction" = "IC Direction"::Outgoing);
        VALIDATE("ID Type",SIIManagement.GetSalesIDType("Bill-to Customer No.","Correction Type","Corrected Invoice No."));
        SIIManagement.UpdateSIIInfoInSalesDoc(Rec);
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        #1..97
        "Salesperson Code" := Cust."Salesperson Code";
        #99..113
          //DATABASE::Customer,"Bill-to Customer No.", //001
          //001
          DATABASE::User,USERID,
          //001
        #115..136
        */
        //end;
        //Unsupported feature: Code Modification on ""Salesperson Code"(Field 43).OnValidate".
        //trigger OnValidate()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        ValidateSalesPersonOnSalesHeader(Rec,FALSE,FALSE);
        ApprovalEntry.SETRANGE("Table ID",DATABASE::"Sales Header");
        ApprovalEntry.SETRANGE("Document Type","Document Type");
        ApprovalEntry.SETRANGE("Document No.","No.");
        #6..12
          DATABASE::Campaign,"Campaign No.",
          DATABASE::"Responsibility Center","Responsibility Center",
          DATABASE::"Customer Template","Bill-to Customer Template Code");
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        #3..15
        */
        //end;
        //Unsupported feature: Code Modification on ""Payment Method Code"(Field 104).OnValidate".
        //trigger OnValidate()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        IF DOPaymentTransLogEntry.FINDFIRST THEN
          DOPaymentTransLogMgt.ValidateHasNoValidTransactions("Document Type",FORMAT("Document Type"),"No.");
        IF DOPaymentMgt.IsValidPaymentMethod(xRec."Payment Method Code") AND NOT DOPaymentMgt.IsValidPaymentMethod("Payment Method Code")
        #4..9
          "Direct Debit Mandate ID" := SEPADirectDebitMandate.GetDefaultMandate("Bill-to Customer No.","Due Date");
          IF "Payment Terms Code" = '' THEN
            "Payment Terms Code" := PaymentMethod."Direct Debit Pmt. Terms Code";
        END ELSE
          "Direct Debit Mandate ID" := '';
        "Bal. Account Type" := PaymentMethod."Bal. Account Type";
        "Bal. Account No." := PaymentMethod."Bal. Account No.";
        IF "Bal. Account No." <> '' THEN BEGIN
          TESTFIELD("Applies-to Doc. No.",'');
          TESTFIELD("Applies-to ID",'');
        END;
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        #1..12
        END;
        #15..20
        */
        //end;
        //Unsupported feature: Code Modification on ""Sell-to Contact No."(Field 5052).OnValidate".
        //trigger "(Field 5052)()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        TESTFIELD(Status,Status::Open);
        IF "Sell-to Contact No." <> '' THEN
          IF Cont.GET("Sell-to Contact No.") THEN
            Cont.CheckIfPrivacyBlockedGeneric;
        IF ("Sell-to Contact No." <> xRec."Sell-to Contact No.") AND
           (xRec."Sell-to Contact No." <> '')
        #9..57
              VALIDATE("Salesperson Code",Cont."Salesperson Code");
        UpdateSellToCust("Sell-to Contact No.");
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        TESTFIELD(Status,Status::Open);
        #6..60
        */
        //end;
        //Unsupported feature: Code Modification on ""Bill-to Contact No."(Field 5053).OnValidate".
        //trigger "(Field 5053)()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        TESTFIELD(Status,Status::Open);
        IF "Bill-to Contact No." <> '' THEN
          IF Cont.GET("Bill-to Contact No.") THEN
            Cont.CheckIfPrivacyBlockedGeneric;
        IF ("Bill-to Contact No." <> xRec."Bill-to Contact No.") AND
           (xRec."Bill-to Contact No." <> '')
        #9..42
        END;
        UpdateBillToCust("Bill-to Contact No.");
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        TESTFIELD(Status,Status::Open);
        #6..45
        */
        //end;
        //Unsupported feature: Property Deletion (DataClassification) on ""Assigned User ID"(Field 9000)".
        //Unsupported feature: Code Modification on ""Corrected Invoice No."(Field 10705).OnValidate".
        //trigger "(Field 10705)()
        //Parameters and return type have not been exported.
        //>>>> ORIGINAL CODE:
        //begin
        /*
        IF "Corrected Invoice No." <> '' THEN
          SalesInvoiceHeader.CheckCorrectedDocumentExist("Bill-to Customer No.","Corrected Invoice No.");
        VALIDATE("ID Type",SIIManagement.GetSalesIDType("Bill-to Customer No.","Correction Type","Corrected Invoice No."));
        */
        //end;
        //>>>> MODIFIED CODE:
        //begin
        /*
        IF "Corrected Invoice No." <> '' THEN
          SalesInvoiceHeader.CheckCorrectedDocumentExist("Bill-to Customer No.","Corrected Invoice No.");
        */
        //end;
        //Unsupported feature: Deletion on ""Correction Type"(Field 10711).OnValidate".
        //Unsupported feature: Deletion (FieldCollection) on ""ID Type"(Field 10722)".
        field(50009; "Factura Simplificada"; Option)
        {
            Caption = 'Factura Simplificada';
            Description = 'TBAI_AL_01 factura simplificada';
            OptionCaption = 'No,S´Š¢';
            OptionMembers = N,S;
        }
        field(50099; FacturaFin; Code[20])
        {
        }
        field(50100; SendToTicketBAI; Boolean)
        {
            Caption = 'Enviar Factura a Ticket BAI';
            Description = 'TBAI_AL_01';
        }
    }
    //Unsupported feature: Code Insertion (VariableCollection) on "OnDelete".
    //trigger (Variable: Opp)()
    //Parameters and return type have not been exported.
    //begin
    /*
    */
    //end;
    //Unsupported feature: Code Modification on "OnDelete".
    //trigger OnDelete()
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF DOPaymentTransLogEntry.FINDFIRST THEN
      DOPaymentTransLogMgt.ValidateCanDeleteDocument("Payment Method Code","Document Type",FORMAT("Document Type"),"No.");
    IF NOT UserSetupMgt.CheckRespCenter(0,"Responsibility Center") THEN
      ERROR(
        Text022,
        RespCenter.TABLECAPTION,UserSetupMgt.GetSalesFilter);
    SalesPost.DeleteHeader(
      Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
    ArchiveManagement.AutoArchiveSalesDocument(Rec);
    UpdateOpportunity;
    VALIDATE("Applies-to ID",'');
    VALIDATE("Incoming Document Entry No.",0);
    ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
    SalesLine.RESET;
    SalesLine.LOCKTABLE;
    #23..35
    SalesCommentLine.SETRANGE("Document Type","Document Type");
    SalesCommentLine.SETRANGE("No.","No.");
    SalesCommentLine.DELETEALL;
    IF (SalesShptHeader."No." <> '') OR
       (SalesInvHeader."No." <> '') OR
       (SalesCrMemoHeader."No." <> '') OR
       (ReturnRcptHeader."No." <> '') OR
       (SalesInvHeaderPrepmt."No." <> '') OR
       (SalesCrMemoHeaderPrepmt."No." <> '')
    THEN
      MESSAGE(PostedDocsToPrintCreatedMsg);
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    //Begin --IZERTIS 310317 Assing User
    //CARLOS COSME
    IF UserDims.existsUser(USERID) THEN
      TESTFIELD("Assigned User ID", USERID);
    //End --IZERTIS 310317 Assing User
    #1..8
    // --> nuevo
    IF ("Opportunity No." <> '') AND
       ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order]) THEN
    // <--nuevo
    SalesPost.TestDeleteHeader(
      Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
    #39..45
    THEN BEGIN
      IF SalesShptHeader."No." <> '' THEN
        IF CONFIRM(
             Text000,TRUE,
             SalesShptHeader."No.")
        THEN BEGIN
          SalesShptHeader.SETRECFILTER;
          SalesShptHeader.PrintRecords(TRUE);
        END;
      IF SalesInvHeader."No." <> '' THEN
        IF CONFIRM(
             Text001,TRUE,
             SalesInvHeader."No.")
        THEN BEGIN
          SalesInvHeader.SETRECFILTER;
          SalesInvHeader.PrintRecords(TRUE);
        END;
      IF SalesCrMemoHeader."No." <> '' THEN
        IF CONFIRM(
             Text002,TRUE,
             SalesCrMemoHeader."No.")
        THEN BEGIN
          SalesCrMemoHeader.SETRECFILTER;
          SalesCrMemoHeader.PrintRecords(TRUE);
        END;
      IF ReturnRcptHeader."No." <> '' THEN
        IF CONFIRM(
             Text023,TRUE,
             ReturnRcptHeader."No.")
        THEN BEGIN
          ReturnRcptHeader.SETRECFILTER;
          ReturnRcptHeader.PrintRecords(TRUE);
        END;
      IF SalesInvHeaderPrepmt."No." <> '' THEN
        IF CONFIRM(
             Text055,TRUE,
             SalesInvHeader."No.")
        THEN BEGIN
          SalesInvHeaderPrepmt.SETRECFILTER;
          SalesInvHeaderPrepmt.PrintRecords(TRUE);
        END;
      IF SalesCrMemoHeaderPrepmt."No." <> '' THEN
        IF CONFIRM(
             Text054,TRUE,
             SalesCrMemoHeaderPrepmt."No.")
        THEN BEGIN
          SalesCrMemoHeaderPrepmt.SETRECFILTER;
          SalesCrMemoHeaderPrepmt.PrintRecords(TRUE);
        END;
      SalesPost.DeleteHeader(
        Rec,SalesShptHeader,SalesInvHeader,SalesCrMemoHeader,ReturnRcptHeader,SalesInvHeaderPrepmt,SalesCrMemoHeaderPrepmt);
    END;
    IF ("Opportunity No." <> '') AND
       ("Document Type" IN ["Document Type"::Quote,"Document Type"::Order])
    THEN
      IF Opp.GET("Opportunity No.") THEN BEGIN
        IF "Document Type" = "Document Type"::Order THEN BEGIN
          IF NOT CONFIRM(Text040,TRUE) THEN
            ERROR(Text044);
          TempOpportunityEntry.INIT;
          TempOpportunityEntry.VALIDATE("Opportunity No.",Opp."No.");
          TempOpportunityEntry."Sales Cycle Code" := Opp."Sales Cycle Code";
          TempOpportunityEntry."Contact No." := Opp."Contact No.";
          TempOpportunityEntry."Contact Company No." := Opp."Contact Company No.";
          TempOpportunityEntry."Salesperson Code" := Opp."Salesperson Code";
          TempOpportunityEntry."Campaign No." := Opp."Campaign No.";
          TempOpportunityEntry."Action Taken" := TempOpportunityEntry."Action Taken"::Lost;
          TempOpportunityEntry.INSERT;
          TempOpportunityEntry.SETRANGE("Action Taken",TempOpportunityEntry."Action Taken"::Lost);
          PAGE.RUNMODAL(PAGE::"Close Opportunity",TempOpportunityEntry);
          IF Opp.GET("Opportunity No.") THEN
            IF Opp.Status <> Opp.Status::Lost THEN
              ERROR(Text043);
        END;
        Opp."Sales Document Type" := Opp."Sales Document Type"::" ";
        Opp."Sales Document No." := '';
        Opp.MODIFY;
        "Opportunity No." := '';
      END;
    #15..18
    ApprovalsMgmt.DeleteApprovalEntry(DATABASE::"Sales Header","Document Type","No.");
    #20..38
    */
    //end;
    //Unsupported feature: Code Insertion (VariableCollection) on "OnInsert".
    //trigger (Variable: UserDims)()
    //Parameters and return type have not been exported.
    //begin
    /*
    */
    //end;
    //Unsupported feature: Code Modification on "OnInsert".
    //trigger OnInsert()
    //>>>> ORIGINAL CODE:
    //begin
    /*
    InitInsert;
    InsertMode := TRUE;
    #4..7
      VALIDATE("Sell-to Contact No.",GetFilterContNo);
    "Doc. No. Occurrence" := ArchiveManagement.GetNextOccurrenceNo(DATABASE::"Sales Header","Document Type","No.");
    IF "Salesperson Code" = '' THEN
      SetDefaultSalesperson;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #1..10
    //Begin --IZERTIS 310317 Assing Dim
    //CARLOS COSME - informo dimensiones y valores por defecto
    CompanyInfo.GET;
    "Assigned User ID" := USERID;
    {
    DocumentDim.INIT;
    DocumentDim."Table ID" := 36;
    DocumentDim."Document Type" := "Document Type";
    DocumentDim."Document No." := "No.";
    DocumentDim."Line No." := 0;
    DocumentDim."Dimension Code" := 'PROYECTO';
    DocumentDim."Dimension Value Code" := UserDimensions.getProjectDim(USERID);
    DocumentDim.INSERT;
    "Shortcut Dimension 1 Code" := DocumentDim."Dimension Value Code";
    DocumentDim.INIT;
    DocumentDim."Table ID" := 36;
    DocumentDim."Document Type" := "Document Type";
    DocumentDim."Document No." := "No.";
    DocumentDim."Line No." := 0;
    DocumentDim."Dimension Code" := 'PROVINCIAS';
    DocumentDim."Dimension Value Code" := UserDimensions.getAreaDim(USERID);
    DocumentDim.INSERT;
    DocumentDim.INIT;
    DocumentDim."Table ID" := 36;
    DocumentDim."Document Type" := "Document Type";
    DocumentDim."Document No." := "No.";
    DocumentDim."Line No." := 0;
    DocumentDim."Dimension Code" := 'UNIDADES PRODUCCI´Š¢N';
    DocumentDim."Dimension Value Code" := UserDimensions.getDeptDim(USERID);
    DocumentDim.INSERT;
    DocumentDim.INIT;
    DocumentDim."Table ID" := 36;
    DocumentDim."Document Type" := "Document Type";
    DocumentDim."Document No." := "No.";
    DocumentDim."Line No." := 0;
    DocumentDim."Dimension Code" := 'SEGMENTO';
    DocumentDim."Dimension Value Code" := UserDimensions.getSegmentDim(USERID);
    DocumentDim.INSERT;
    "Shortcut Dimension 2 Code" := DocumentDim."Dimension Value Code";
    "Location Code" := UserDimensions.getLocationCode(USERID);
    }
    VALIDATE("Prices Including VAT", TRUE);
    //Begin --IZERTIS 310317 Assing Dim
    */
    //end;
    //Unsupported feature: Code Insertion on "OnModify".
    //trigger OnModify()
    //var
    //UserDimensions: Record 50000;
    //begin
    /*
    //Begin --IZERTIS 310317 Validate User
    //CARLOS COSME
    IF UserDims.existsUser(USERID) THEN
      TESTFIELD("Assigned User ID", USERID);
    //End --IZERTIS 310317 Validate User
    */
    //end;
    //Unsupported feature: Code Modification on "InitRecord(PROCEDURE 10)".
    //procedure InitRecord();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    SalesSetup.GET;
    CASE "Document Type" OF
    #4..54
    IF SalesSetup."Default Posting Date" = SalesSetup."Default Posting Date"::"No Date" THEN
      "Posting Date" := 0D;
    "Document Date" := WORKDATE;
    VALIDATE("Location Code",UserSetupMgt.GetLocation(0,Cust."Location Code","Responsibility Center"));
    #62..68
    UpdateOutboundWhseHandlingTime;
    "Responsibility Center" := UserSetupMgt.GetRespCenter(0,"Responsibility Center");
    SIIManagement.UpdateSIIInfoInSalesDoc(Rec);
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #1..57
    //"Document Date" := WORKDATE; //001
    #59..71
    InitSii;
    */
    //end;
    //Unsupported feature: Variable Insertion (Variable: Customer) (VariableCollection) on "GetCust(PROCEDURE 2)".
    //Unsupported feature: Code Modification on "RecreateSalesLines(PROCEDURE 4)".
    //procedure RecreateSalesLines();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF SalesLinesExist THEN BEGIN
      IF HideValidationDialog OR NOT GUIALLOWED THEN
        Confirmed := TRUE
    #4..62
            IF TempATOLink.AsmExistsForSalesLine(SalesLineTmp) THEN BEGIN
              ATOLink := TempATOLink;
              ATOLink."Document Line No." := SalesLine."Line No.";
              ATOLink.INSERT;
              ATOLink.UpdateAsmFromSalesLineATOExist(SalesLine);
              TempATOLink.DELETE;
            END;
          UNTIL SalesLineTmp.NEXT = 0;
    #72..82
          Text017,ChangedFieldName);
    END;
    SalesLine.BlockDynamicTracking(FALSE);
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #1..65
              ATOLink.INSERT;
              SalesLine.AutoAsmToOrder;
    #69..85
    */
    //end;
    //Unsupported feature: Code Modification on "MessageIfSalesLinesExist(PROCEDURE 5)".
    //procedure MessageIfSalesLinesExist();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF SalesLinesExist AND NOT HideValidationDialog THEN BEGIN
      MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
      MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,Text019);
      MESSAGE(MessageText);
    END;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    IF SalesLinesExist AND NOT HideValidationDialog THEN
      MESSAGE(
        Text018 +
        Text019,
        ChangedFieldName);
    */
    //end;
    //Unsupported feature: Code Modification on "PriceMessageIfSalesLinesExist(PROCEDURE 7)".
    //procedure PriceMessageIfSalesLinesExist();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF SalesLinesExist AND NOT HideValidationDialog THEN BEGIN
      MessageText := STRSUBSTNO(LinesNotUpdatedMsg,ChangedFieldName);
      IF "Currency Code" <> '' THEN
        MessageText := STRSUBSTNO(SplitMessageTxt,MessageText,AffectExchangeRateMsg);
      MESSAGE(MessageText);
    END;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    IF SalesLinesExist AND NOT HideValidationDialog THEN
      MESSAGE(
        Text018 +
        Text020,ChangedFieldName);
    */
    //end;
    //Unsupported feature: Property Deletion (Local) on "ValidateShortcutDimCode(PROCEDURE 19)".
    //Unsupported feature: Code Modification on "UpdateBillToCont(PROCEDURE 27)".
    //procedure UpdateBillToCont();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF Cust.GET(CustomerNo) THEN BEGIN
      IF Cust."Primary Contact No." <> '' THEN
        "Bill-to Contact No." := Cust."Primary Contact No."
    #4..12
      END;
      "Bill-to Contact" := Cust.Contact;
    END;
    IF "Bill-to Contact No." <> '' THEN
      IF Contact.GET("Bill-to Contact No.") THEN
        Contact.CheckIfPrivacyBlockedGeneric;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #1..15
    */
    //end;
    //Unsupported feature: Code Modification on "CreateInvtPutAwayPick(PROCEDURE 29)".
    //procedure CreateInvtPutAwayPick();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF "Document Type" = "Document Type"::Order THEN
      IF NOT IsApprovedForPosting THEN
        EXIT;
    TESTFIELD(Status,Status::Released);
    WhseRequest.RESET;
    #7..16
    END;
    WhseRequest.SETRANGE("Source No.","No.");
    REPORT.RUNMODAL(REPORT::"Create Invt Put-away/Pick/Mvmt",TRUE,FALSE,WhseRequest);
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #4..19
    */
    //end;
    //Unsupported feature: Code Modification on "UpdateAllLineDim(PROCEDURE 34)".
    //procedure UpdateAllLineDim();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    // Update all lines with changed dimensions.
    IF NewParentDimSetID = OldParentDimSetID THEN
    #4..14
        NewDimSetID := DimMgt.GetDeltaDimSetID(SalesLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
        IF SalesLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
          SalesLine."Dimension Set ID" := NewDimSetID;
          IF NOT HideValidationDialog AND GUIALLOWED THEN
            VerifyShippedReceivedItemLineDimChange(ShippedReceivedItemLineDimChangeConfirmed);
          DimMgt.UpdateGlobalDimFromDimSetID(
            SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
          SalesLine.MODIFY;
          ATOLink.UpdateAsmDimFromSalesLine(SalesLine);
        END;
      UNTIL SalesLine.NEXT = 0;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #1..17
    #22..27
    */
    //end;
    //Unsupported feature: Property Insertion (Local) on "IsApprovedForPosting(PROCEDURE 53)".
    //Unsupported feature: Code Modification on "IsApprovedForPosting(PROCEDURE 53)".
    //procedure IsApprovedForPosting();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
      IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
        ERROR(STRSUBSTNO(PrepaymentInvoicesNotPaidErr,"Document Type","No."));
      IF "Document Type" = "Document Type"::Order THEN
        IF PrepaymentMgt.TestSalesPayment(Rec) THEN
          ERROR(STRSUBSTNO(Text072,"Document Type","No."));
      EXIT(TRUE);
    END;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    IF ApprovalsMgmt.PrePostApprovalCheckSales(Rec) THEN BEGIN
      IF PrepaymentMgt.TestSalesPrepayment(Rec) THEN
        ERROR(STRSUBSTNO(Text071,"Document Type","No."));
    #4..8
    */
    //end;
    //Unsupported feature: Property Insertion (Local) on "SynchronizeAsmHeader(PROCEDURE 56)".
    //Unsupported feature: Code Modification on "CreateSalesLine(PROCEDURE 78)".
    //procedure CreateSalesLine();
    //Parameters and return type have not been exported.
    //>>>> ORIGINAL CODE:
    //begin
    /*
    SalesLine.INIT;
    SalesLine."Line No." := SalesLine."Line No." + 10000;
    SalesLine.VALIDATE(Type,TempSalesLine.Type);
    #4..16
        SalesLine."Purch. Order Line No." := TempSalesLine."Purch. Order Line No.";
        SalesLine."Drop Shipment" := SalesLine."Purch. Order Line No." <> 0;
      END;
      SalesLine.VALIDATE("Shipment Date",TempSalesLine."Shipment Date");
    END;
    SalesLine.INSERT;
    */
    //end;
    //>>>> MODIFIED CODE:
    //begin
    /*
    #1..19
    END;
    SalesLine.INSERT;
    */
    //end;
    procedure ShowShortcutDimCode(var ShortcutDimCode: array[8] of Code[20])
    begin
        DimMgt.GetShortcutDimensions("Dimension Set ID", ShortcutDimCode);
    end;

    local procedure InitSii()
    var
        GeneralLedgerSetup: Record 98;
        SIIManagement: Codeunit 10756;
    begin
        GeneralLedgerSetup.GET;
        IF GeneralLedgerSetup."VAT Cash Regime" THEN
            "Special Scheme Code" := "Special Scheme Code"::"07 Special Cash"
        ELSE
            IF "Sell-to Customer No." <> '' THEN
                IF Cust.GET("Sell-to Customer No.") THEN
                    IF SIIManagement.CountryIsLocal("VAT Country/Region Code") OR
                       SIIManagement.CustomerIsIntraCommunity(Cust."No.")
                    THEN
                        "Special Scheme Code" := "Special Scheme Code"::"01 General"
                    ELSE
                        "Special Scheme Code" := "Special Scheme Code"::"02 Export";
    end;
    //Unsupported feature: Deletion (VariableCollection) on "InitRecord(PROCEDURE 10).SIIManagement(Variable 1100000)".
    //Unsupported feature: Deletion (VariableCollection) on "MessageIfSalesLinesExist(PROCEDURE 5).MessageText(Variable 1001)".
    //Unsupported feature: Deletion (VariableCollection) on "PriceMessageIfSalesLinesExist(PROCEDURE 7).MessageText(Variable 1001)".
    //Unsupported feature: Property Modification (Length) on "CreateDim(PROCEDURE 16).No1(Parameter 1001)".
    //Unsupported feature: Property Modification (Length) on "CreateDim(PROCEDURE 16).No(Variable 1012)".
    //Unsupported feature: Deletion (VariableCollection) on "UpdateBillToCont(PROCEDURE 27).Contact(Variable 1002)".
    //Unsupported feature: Deletion (VariableCollection) on "UpdateAllLineDim(PROCEDURE 34).ShippedReceivedItemLineDimChangeConfirmed(Variable 1004)".
    var
        Opp: Record 5092;
        UserDimensions: Record 50000;

    var
        Opp: Record 5092;
        TempOpportunityEntry: Record 5093 temporary;

    var
        UserDims: Record 50000;
    //Unsupported feature: Property Modification (TextConstString) on "Text005(Variable 1005)".
    //var
    //>>>> ORIGINAL VALUE:
    //Text005 : ENU=You cannot reset %1 because the document still has one or more lines.;ESP=No se puede modificar %1 ya que el documento tiene una o m´Š¢s l´Š¢neas.;
    //Variable type has not been exported.
    //>>>> MODIFIED VALUE:
    //Text005 : ENU=You cannot reset %1 because the document still has one or more lines.;ESP=No se puede modificar el cliente %1 ya que el documento tiene una o m´Š¢s l´Š¢neas.;
    //Variable type has not been exported.
    //Unsupported feature: Property Modification (TextConstString) on "Text039(Variable 1086)".
    //var
    //>>>> ORIGINAL VALUE:
    //Text039 : ENU=Contact %1 %2 is not related to a customer.;ESP=El contacto %1 %2 no est´Š¢ relacionado con un cliente.;
    //Variable type has not been exported.
    //>>>> MODIFIED VALUE:
    //Text039 : ENU=Contact %1 %2 is not related to a customer.;ESP=Contacto %1 %2 no est´Š¢ relacionado con un cliente.;
    //Variable type has not been exported.
    var
        Text000: Label 'Do you want to print shipment %1?';
        Text001: Label 'Do you want to print invoice %1?';
        Text002: Label 'Do you want to print credit memo %1?';

    var
        Text018: Label 'You have changed %1 on the sales header, but it has not been changed on the existing sales lines.\';

    var
        Text020: Label 'The change may affect the exchange rate used in the price calculation of the sales lines.';

    var
        Text023: Label 'Do you want to print return receipt %1?';

    var
        ArchiveManagement: Codeunit 5063;

    var
        Text043: Label 'Wizard Aborted';

    var
        Text055: Label 'Do you want to print prepayment invoice %1?';
        Text054: Label 'Do you want to print prepayment credit memo %1?';

    var
        Text071: Label 'There are unpaid prepayment invoices that are related to the document of type %1 with the number %2.';

    var
        Text1100002: Label 'The %1 does not exist. \Identification fields and values:\%1 = %2';

    var
        UserDims: Record 50000;
}
