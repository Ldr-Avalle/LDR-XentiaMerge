page 50030 "Posted Sales Invoice2"
{
    ApplicationArea = All;
    Caption = 'Posted Sales Invoice';
    DeleteAllowed = false;
    InsertAllowed = false;
    PageType = Card;
    Permissions = TableData "Sales Invoice Header" = rm;
    PromotedActionCategories = 'New,Process,Report,Invoice,Credit Card';
    RefreshOnActivate = true;
    SourceTable = "Sales Invoice Header";
    UsageCategory = Administration;

    layout
    {
        area(content)
        {
            group(General)
            {
                Caption = 'General';
                field("No."; Rec."No.")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Sell-to Customer No."; Rec."Sell-to Customer No.")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Sell-to Contact No."; Rec."Sell-to Contact No.")
                {
                    Editable = false;
                }
                field("Sell-to Customer Name"; Rec."Sell-to Customer Name")
                {
                    Editable = false;
                }
                field("Sell-to Address"; Rec."Sell-to Address")
                {
                    Editable = false;
                }
                field("Sell-to Address 2"; Rec."Sell-to Address 2")
                {
                    Editable = false;
                }
                field("Sell-to Post Code"; Rec."Sell-to Post Code")
                {
                    Editable = false;
                }
                field("Sell-to City"; Rec."Sell-to City")
                {
                    Editable = false;
                }
                field("Sell-to County"; Rec."Sell-to County")
                {
                    Editable = false;
                }
                field("Sell-to Contact"; Rec."Sell-to Contact")
                {
                    Editable = false;
                }
                field("Posting Date"; Rec."Posting Date")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Document Date"; Rec."Document Date")
                {
                    Editable = false;
                }
                field("Document Exchange Status"; Rec."Document Exchange Status")
                {
                    Editable = false;
                    StyleExpr = DocExchStatusStyle;

                    trigger OnDrillDown()
                    begin
                        DocExchStatusDrillDown;
                    end;
                }
                field("Quote No."; Rec."Quote No.")
                {
                }
                field("Order No."; Rec."Order No.")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Pre-Assigned No."; Rec."Pre-Assigned No.")
                {
                    Editable = false;
                }
                field("External Document No."; Rec."External Document No.")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Salesperson Code"; Rec."Salesperson Code")
                {
                    Editable = false;
                }
                field("Responsibility Center"; Rec."Responsibility Center")
                {
                    Editable = false;
                }
                field("User ID"; Rec."User ID")
                {
                }
                field("No. Series"; Rec."No. Series")
                {
                }
                field("Amount Including VAT"; Rec."Amount Including VAT")
                {
                }
                field("No. Printed"; Rec."No. Printed")
                {
                    Editable = false;
                }
            }
            part(SalesInvLines; 133)
            {
                SubPageLink = "Document No." = FIELD("No.");
            }
            group(Invoicing)
            {
                Caption = 'Invoicing';
                field("Bill-to Customer No."; Rec."Bill-to Customer No.")
                {
                    Editable = false;
                    Importance = Promoted;
                    Visible = BilltoCustomerNoVisible;
                }
                field("Bill-to Contact No."; Rec."Bill-to Contact No.")
                {
                    Editable = false;
                    Visible = BilltoContactNoVisible;
                }
                field("Bill-to Name"; Rec."Bill-to Name")
                {
                    Editable = false;
                    Visible = BilltoNameVisible;
                }
                field("Bill-to Address"; Rec."Bill-to Address")
                {
                    Editable = false;
                    Visible = BilltoAddressVisible;
                }
                field("Bill-to Address 2"; Rec."Bill-to Address 2")
                {
                    Editable = false;
                    Visible = BilltoAddress2Visible;
                }
                field("Bill-to Post Code"; Rec."Bill-to Post Code")
                {
                    Editable = false;
                    Visible = BilltoPostCodeVisible;
                }
                field("Bill-to City"; "Bill-to City")
                {
                    Editable = false;
                    Visible = BilltoCityVisible;
                }
                field("Bill-to County"; Rec."Bill-to County")
                {
                    Editable = false;
                }
                field("Bill-to Contact"; Rec."Bill-to Contact")
                {
                    Editable = false;
                    Visible = BilltoContactVisible;
                }
                field("Shortcut Dimension 1 Code"; Rec."Shortcut Dimension 1 Code")
                {
                    Editable = false;
                }
                field("Shortcut Dimension 2 Code"; Rec."Shortcut Dimension 2 Code")
                {
                    Editable = false;
                }
                field("Payment Terms Code"; Rec."Payment Terms Code")
                {
                    Editable = false;
                    Importance = Promoted;
                    Visible = PaymentTermsCodeVisible;
                }
                field("Due Date"; Rec."Due Date")
                {
                    Editable = false;
                    Importance = Promoted;
                    Visible = DueDateVisible;
                }
                field("Payment Discount %"; Rec."Payment Discount %")
                {
                    Editable = false;
                }
                field("Pmt. Discount Date"; Rec."Pmt. Discount Date")
                {
                    Editable = false;
                }
                field("Payment Method Code"; Rec."Payment Method Code")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Direct Debit Mandate ID"; Rec."Direct Debit Mandate ID")
                {
                    Editable = false;
                }
                field("Credit Card No."; Rec."Credit Card No.")
                {
                    Editable = false;
                }
                field("Prices Including VAT"; Rec."Prices Including VAT")
                {
                    Visible = PricesIncludingVATVisible;
                }
                field(GetCreditcardNumber; Rec.GetCreditcardNumber)
                {
                    Caption = 'Cr. Card Number (Last 4 Digits)';
                    Editable = false;
                }
            }
            group("SII Information")
            {
                Caption = 'SII Information';
                field(OperationDescription; Rec."Operation Description")
                {
                    Caption = 'Operation Description';
                    Editable = false;
                    MultiLine = true;
                    ToolTip = 'Specifies the Operation Description.';

                    trigger OnValidate()
                    var
                        SIIManagement: Codeunit "10756";
                    begin
                        SIIManagement.SplitOperationDescription(Rec.OperationDescription, Rec."Operation Description", Rec."Operation Description 2");
                        Rec.VALIDATE("Operation Description");
                        Rec.VALIDATE("Operation Description 2");
                        Rec.MODIFY(TRUE);
                    end;
                }
                field("Operation Description"; Rec."Operation Description")
                {
                    ToolTip = 'Specifies the Operation Description.';
                }
                field("Special Scheme Code"; Rec."Special Scheme Code")
                {
                    ToolTip = 'Specifies the Special Scheme Code.';
                }
                field("Invoice Type"; Rec."Invoice Type")
                {
                    ToolTip = 'Specifies the Invoice Type.';
                }
                field("Succeeded Company Name"; Rec."Succeeded Company Name")
                {
                    ToolTip = 'Specifies the name of the company sucessor in connection with corporate restructuring.';
                }
                field("Succeeded VAT Registration No."; Rec."Succeeded VAT Registration No.")
                {
                    ToolTip = 'Specifies the VAT registration number of the company sucessor in connection with corporate restructuring.';
                }
                field(FacturaFin; Rec.FacturaFin)
                {
                    Caption = 'Factura Fin (s´Š¢lo para F4)';
                }
            }
            group(Shipping)
            {
                Caption = 'Shipping';
                field("Ship-to Code"; Rec."Ship-to Code")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Ship-to Name"; Rec."Ship-to Name")
                {
                    Editable = false;
                }
                field("Ship-to Address"; Rec."Ship-to Address")
                {
                    Editable = false;
                }
                field("Ship-to Address 2"; Rec."Ship-to Address 2")
                {
                    Editable = false;
                }
                field("Ship-to Post Code"; Rec."Ship-to Post Code")
                {
                    Editable = false;
                    Importance = Promoted;
                }
                field("Ship-to City"; Rec."Ship-to City")
                {
                    Editable = false;
                }
                field("Ship-to County"; Rec."Ship-to County")
                {
                    Editable = false;
                }
                field("Ship-to Contact"; Rec."Ship-to Contact")
                {
                    Editable = false;
                }
                field("Location Code"; Rec."Location Code")
                {
                    Editable = false;
                }
                field("Shipment Method Code"; Rec."Shipment Method Code")
                {
                    Editable = false;
                }
                field("Shipment Date"; Rec."Shipment Date")
                {
                    Editable = false;
                    Importance = Promoted;
                }
            }
            group(Payment)
            {
                Caption = 'Payment';
                field("Pay-at Code"; Rec."Pay-at Code")
                {
                    Editable = false;
                    Visible = PayatCodeVisible;
                }
                field("Cust. Bank Acc. Code"; Rec."Cust. Bank Acc. Code")
                {
                    Editable = false;
                    Visible = CustBankAccCodeVisible;
                }
            }
            group("Foreign Trade")
            {
                Caption = 'Foreign Trade';
                field("Currency Code"; Rec."Currency Code")
                {
                    Importance = Promoted;

                    trigger OnAssistEdit()
                    begin
                        ChangeExchangeRate.SetParameter(Rec."Currency Code", Rec."Currency Factor", Rec."Posting Date");
                        ChangeExchangeRate.EDITABLE(FALSE);
                        IF ChangeExchangeRate.RUNMODAL = ACTION::OK THEN BEGIN
                            Rec."Currency Factor" := ChangeExchangeRate.GetParameter;
                            MODIFY;
                        END;
                        CLEAR(ChangeExchangeRate);
                    end;
                }
                field("EU 3-Party Trade"; Rec."EU 3-Party Trade")
                {
                    Editable = false;
                }
            }
            group(Facturae)
            {
                Caption = 'Facturae';
                field(InvoiceType; Rec.InvoiceType)
                {
                }
                field("Start Date"; Rec."Start Date")
                {
                }
                field("End Date"; Rec."End Date")
                {
                }
            }
            group("TicketBAI araba ´Š¢lava")
            {
                Caption = 'TicketBAI araba ´Š¢lava';
                Visible = TBAIActivated;
                field(TBAI_Sended; Rec.TBAI_Sended)
                {
                }
                field(TipoRegistro; Rec.TipoRegistro_)
                {

                    trigger OnValidate()
                    var
                        TBAIAlava2: Record "50007";
                    begin
                        IF (Rec.TipoRegistro = Rec.TipoRegistro::Envío) AND (DocNoTBAI = '') THEN BEGIN
                            TBAIManagement.NosSeriesTbai(DocNoTBAI, Rec."No. SeriesTBAI");
                        END;
                    end;
                }
                field("No. SeriesTBAI"; "No. SeriesTBAI")
                {
                    Editable = false;
                }
                field(DocNoTBAI; DocNoTBAI)
                {
                    Editable = false;
                }
                field(QR_CodeString; QR_CodeString)
                {
                    Editable = false;
                }
                field(R_Identificador_TBAI; R_Identificador_TBAI)
                {
                    Editable = false;
                }
                field(NumFacturaAnterior_; NumFacturaAnterior_)
                {
                    Caption = 'N´Š¢ Factura TBAI anterior';
                    Editable = false;
                }
                field(ClaveRegimenIvaOpTrascendencia; ClaveRegimenIvaOpTrascendencia)
                {
                    Editable = false;
                }
                field("Factura Simplificada"; "Factura Simplificada")
                {
                    Editable = true;

                    trigger OnValidate()
                    begin
                        IF "Factura Simplificada" = Rec."Factura Simplificada"::N THEN
                            FacturaSimplificada := FALSE;
                    end;
                }
                field("Factura Simplificada Sustituci"; "Factura Simplificada Sustituci")
                {
                    Editable = false;
                    Enabled = FacturaSimplificada;

                    trigger OnValidate()
                    begin
                        IF "Factura Simplificada Sustituci" = Rec."Factura Simplificada Sustituci"::N THEN
                            FacturaSimplificadaSustituci := FALSE;
                    end;
                }
                field("Factura 3 o dest"; "Factura 3 o dest")
                {
                    Editable = false;

                    trigger OnValidate()
                    begin
                        IF "Factura 3 o dest" = Rec."Factura 3 o dest"::N THEN
                            Factura3odest := FALSE;
                    end;
                }
                field("varios destinatarios"; "varios destinatarios")
                {
                    Editable = false;
                }
                field("factura rectificativa"; "factura rectificativa")
                {
                    Editable = false;

                    trigger OnValidate()
                    begin
                        IF "factura rectificativa" = Rec."factura rectificativa"::" " THEN
                            facturarectificativa := FALSE;
                    end;
                }
                field("factura rectificativa tipo"; "factura rectificativa tipo")
                {
                    Editable = false;
                    Visible = facturarectificativa;
                }
                field(BaseRectificada; BaseRectificada)
                {
                    Editable = false;
                    Visible = facturarectificativa;
                }
                field(CuotaRectificada; CuotaRectificada)
                {
                    Editable = false;
                    Visible = facturarectificativa;
                }
                field(CuotaRecargoRectificada; CuotaRecargoRectificada)
                {
                    Editable = false;
                    Visible = facturarectificativa;
                }
            }
        }
        area(factboxes)
        {
            part(IncomingDocAttachFactBox; 193)
            {
                ShowFilter = false;
            }
            systempart(; Links)
            {
                Visible = false;
            }
            systempart(; Notes)
            {
                Visible = true;
            }
        }
    }

    actions
    {
        area(navigation)
        {
            group("&Invoice")
            {
                Caption = '&Invoice';
                Image = Invoice;
                action(Statistics)
                {
                    Caption = 'Statistics';
                    Image = Statistics;
                    Promoted = true;
                    PromotedCategory = Category4;
                    PromotedIsBig = true;
                    RunObject = Page 397;
                    RunPageLink = No.=FIELD(No.);
                    ShortCutKey = 'F7';
                }
                action("Co&mments")
                {
                    Caption = 'Co&mments';
                    Image = ViewComments;
                    Promoted = true;
                    PromotedCategory = Category4;
                    PromotedIsBig = true;
                    RunObject = Page 67;
                                    RunPageLink = Document Type=CONST(Posted Invoice),
                                  No.=FIELD(No.),
                                  Document Line No.=CONST(0);
                }
                action(Dimensions)
                {
                    AccessByPermission = TableData 348=R;
                    Caption = 'Dimensions';
                    Image = Dimensions;
                    Promoted = true;
                    PromotedCategory = Category4;
                    PromotedIsBig = true;
                    ShortCutKey = 'Shift+Ctrl+D';

                    trigger OnAction()
                    begin
                        ShowDimensions;
                    end;
                }
                action(Approvals)
                {
                    Caption = 'Approvals';
                    Image = Approvals;
                    Promoted = true;
                    PromotedCategory = Category4;
                    PromotedIsBig = true;

                    trigger OnAction()
                    var
                        ApprovalsMgmt: Codeunit "1535";
                    begin
                        ApprovalsMgmt.ShowPostedApprovalEntries(RECORDID);
                    end;
                }
                separator()
                {
                }
                action("Credit Cards Transaction Lo&g Entries")
                {
                    Caption = 'Credit Cards Transaction Lo&g Entries';
                    Image = CreditCardLog;
                    Promoted = true;
                    PromotedCategory = Category5;
                    PromotedIsBig = true;
                    RunObject = Page 829;
                                    RunPageLink = Document Type=CONST(Payment),
                                  Document No.=FIELD(No.),
                                  Customer No.=FIELD(Bill-to Customer No.);
                }
            }
            group("TicketBAI ´Š¢lava")
            {
                Caption = 'TicketBAI ´Š¢lava';
                action("GenerarTicketBAIEnv´Š¢o")
                {
                    Caption = 'Ticket BAI Env´Š¢o Factura';
                    Image = ElectronicRegister;

                    trigger OnAction()
                    begin
                        TicketBAI.MakeXMLTicketBAI_FacturaEnvio(Rec);//TBAI_AL_01
                        CurrPage.UPDATE(TRUE);
                    end;
                }
                action(GenerarTicketBAIAnula)
                {
                    Caption = 'Ticket BAI Anulaci´Š¢n Factura';
                    Image = ElectronicRegister;

                    trigger OnAction()
                    begin
                        TicketBAI.MakeXMLTicketBAI_FacturaAnulacion(Rec);//TBAI_AL_01
                        CurrPage.UPDATE(TRUE);
                    end;
                }
            }
            group(ActionGroupCRM)
            {
                Caption = 'Dynamics CRM';
                Visible = CRMIntegrationEnabled;
                action(CRMGotoInvoice)
                {
                    Caption = 'Invoice';
                    Enabled = CRMIsCoupledToRecord;
                    Image = CoupledInvoice;
                    ToolTip = 'Open the coupled Microsoft Dynamics CRM account.';

                    trigger OnAction()
                    var
                        CRMIntegrationManagement: Codeunit "5330";
                    begin
                        CRMIntegrationManagement.ShowCRMEntityFromRecordID(RECORDID);
                    end;
                }
                action(CreateInCRM)
                {
                    Caption = 'Create Invoice in Dynamics CRM';
                    Enabled = NOT CRMIsCoupledToRecord;
                    Image = NewInvoice;

                    trigger OnAction()
                    var
                        CRMIntegrationManagement: Codeunit "5330";
                        CRMCouplingManagement: Codeunit "5331";
                    begin
                        CRMIntegrationManagement.CreateNewRecordInCRM(RECORDID,FALSE);
                        IF CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID) THEN BEGIN
                          VALIDATE("Coupled to CRM",TRUE);
                          MODIFY;
                        END;
                    end;
                }
            }
        }
        area(processing)
        {
            action(SendCustom)
            {
                Caption = 'Send';
                Ellipsis = true;
                Image = SendToMultiple;
                Promoted = true;
                PromotedCategory = Category4;
                PromotedIsBig = true;

                trigger OnAction()
                var
                    SalesInvHeader: Record "112";
                begin
                    SalesInvHeader := Rec;
                    CurrPage.SETSELECTIONFILTER(SalesInvHeader);
                    SalesInvHeader.SendRecords;
                end;
            }
            action("&Print")
            {
                Caption = '&Print';
                Ellipsis = true;
                Image = Print;
                //The property 'PromotedCategory' can only be set if the property 'Promoted' is set to 'true'
                //PromotedCategory = Process;

                trigger OnAction()
                begin
                    /*SalesInvHeader := Rec;
                    {CurrPage.SETSELECTIONFILTER(SalesInvHeader);
                    SalesInvHeader.PrintRecords(TRUE);} // --> no estaba comentado
                    
                    //nuevo
                    SalesInvHeader.SETFILTER("No.", '%1', "No.");
                    REPORT.RUN(REPORT::"Factura venta", TRUE, FALSE, SalesInvHeader);*/
                    
                    SalesInvHeader := Rec;
                    CurrPage.SETSELECTIONFILTER(SalesInvHeader);
                    SalesInvHeader.PrintRecords(TRUE);

                end;
            }
            action("&Email")
            {
                Caption = '&Email';
                Image = Email;
                //The property 'PromotedCategory' can only be set if the property 'Promoted' is set to 'true'
                //PromotedCategory = Process;

                trigger OnAction()
                begin
                    SalesInvHeader := Rec;
                    CurrPage.SETSELECTIONFILTER(SalesInvHeader);
                    SalesInvHeader.EmailRecords(TRUE);
                end;
            }
            action("&Navigate")
            {
                Caption = '&Navigate';
                Image = Navigate;
                Promoted = true;
                PromotedCategory = Category4;
                PromotedIsBig = true;

                trigger OnAction()
                begin
                    Navigate;
                end;
            }
            group("F&unctions")
            {
                Caption = 'F&unctions';
                Image = "Action";
                action(FindCorrectiveInvoices)
                {
                    Caption = '&Find Corrective Invoices';
                    Image = FindCreditMemo;
                    RunObject = Page 144;
                                    RunPageLink = Corrected Invoice No.=FIELD(No.);
                }
                action("Crear Facturae")
                {
                    Caption = 'Crear Facturae';

                    trigger OnAction()
                    begin
                        //nuevo
                        CreateFacturae(FALSE, FALSE);
                    end;
                }
                action("Crear Facturae Firmado")
                {

                    trigger OnAction()
                    begin
                        //nuevo
                        CreateFacturae(TRUE, FALSE);
                    end;
                }
                action("Crear Facturae Firmado y Enviar")
                {

                    trigger OnAction()
                    begin
                        //nuevo
                        CreateFacturae(TRUE, TRUE);
                    end;
                }
                action("Crear Facturae Firmado Enviar PDF")
                {

                    trigger OnAction()
                    begin
                        //nuevo
                        CreatePdf(TRUE);
                    end;
                }
            }
            action(ActivityLog)
            {
                Caption = 'Activity Log';
                Image = Log;

                trigger OnAction()
                begin
                    ShowActivityLog;
                end;
            }
            group(IncomingDocument)
            {
                Caption = 'Incoming Document';
                Image = Documents;
                action(IncomingDocCard)
                {
                    Caption = 'View Incoming Document';
                    Enabled = HasIncomingDocument;
                    Image = ViewOrder;
                    //The property 'ToolTip' cannot be empty.
                    //ToolTip = '';

                    trigger OnAction()
                    var
                        IncomingDocument: Record "130";
                    begin
                        IncomingDocument.ShowCard("No.","Posting Date");
                    end;
                }
                action(SelectIncomingDoc)
                {
                    AccessByPermission = TableData 130=R;
                    Caption = 'Select Incoming Document';
                    Enabled = NOT HasIncomingDocument;
                    Image = SelectLineToApply;
                    //The property 'ToolTip' cannot be empty.
                    //ToolTip = '';

                    trigger OnAction()
                    var
                        IncomingDocument: Record "130";
                    begin
                        IncomingDocument.SelectIncomingDocumentForPostedDocument("No.","Posting Date");
                    end;
                }
                action(IncomingDocAttachFile)
                {
                    Caption = 'Create Incoming Document from File';
                    Ellipsis = true;
                    Enabled = NOT HasIncomingDocument;
                    Image = Attach;
                    //The property 'ToolTip' cannot be empty.
                    //ToolTip = '';

                    trigger OnAction()
                    var
                        IncomingDocumentAttachment: Record "133";
                    begin
                        IncomingDocumentAttachment.NewAttachmentFromPostedDocument("No.","Posting Date");
                    end;
                }
            }
        }
    }

    trigger OnAfterGetCurrRecord()
    var
        IncomingDocument: Record "130";
        CRMCouplingManagement: Codeunit "5331";
        show: Boolean;
        UserDims: Record "50000";
        SIIManagement: Codeunit "10756";
    begin
        HasIncomingDocument := IncomingDocument.PostedDocExists("No.","Posting Date");
        DocExchStatusStyle := GetDocExchStatusStyle;
        CurrPage.IncomingDocAttachFactBox.PAGE.LoadDataFromRecord(Rec);
        CRMIsCoupledToRecord := CRMIntegrationEnabled AND CRMCouplingManagement.IsRecordCoupledToCRM(RECORDID);
        SIIManagement.CombineOperationDescription("Operation Description","Operation Description 2",OperationDescription);
        //nuevo
        show := NOT UserDims.existsUser(USERID);

        BilltoCustomerNoVisible := show;
        BilltoNameVisible := show;
        BilltoAddressVisible := show;
        BilltoAddress2Visible := show;
        BilltoPostCodeVisible := show;
        BilltoCityVisible := show;
        BilltoContactNoVisible := show;
        BilltoContactVisible := show;
        PayatCodeVisible := show;
        CustBankAccCodeVisible := show;
        DueDateVisible := show;
        PaymentTermsCodeVisible := show;
        PricesIncludingVATVisible := show;

        IF UserDims.existsUser(USERID) THEN SETFILTER("User ID", '%1', USERID); //CARLOS COSME
    end;

    trigger OnAfterGetRecord()
    begin
        DocExchStatusStyle := GetDocExchStatusStyle;
    end;

    trigger OnOpenPage()
    var
        CRMIntegrationManagement: Codeunit "5330";
        SIIManagement: Codeunit "10756";
        TBAIAlava: Record "50007";
    begin
        SetSecurityFilterOnRespCenter;
        CRMIntegrationEnabled := CRMIntegrationManagement.IsCRMIntegrationEnabled;
        SIIManagement.CombineOperationDescription("Operation Description","Operation Description 2",OperationDescription);
        TBAIActivated := TBAIManagement.TBAIActivated;
        IF TBAIActivated THEN
          TBAIManagement.GetEncadenamientoFacturaAnterior(SerieFacturaAnterior_,NumFacturaAnterior_,FechaExpedicionFacturaAnterior_,SignatureValueFirmaFacturaAnterior_);
        /*
        TBAIAlava.SETRANGE(TipoRegistro,TBAIAlava.TipoRegistro::Configuraci´Š¢n);
        IF TBAIAlava.FINDSET(TRUE,TRUE) THEN BEGIN
          Rec.SETFILTER("No. Series",'%1|%2|%3',TBAIAlava.NS_NosSerie2,TBAIAlava.NS_NosSerie1,TBAIAlava.NS_NosSerie4);
          Rec.SETFILTER("Posting Date",'%1..',TBAIAlava.C_FechaInicioEnvioTbai);
        END;*/

    end;

    var
        SalesInvHeader: Record "112";
        ChangeExchangeRate: Page "511";
                                HasIncomingDocument: Boolean;
                                DocExchStatusStyle: Text;
                                CRMIntegrationEnabled: Boolean;
                                CRMIsCoupledToRecord: Boolean;
                                BilltoCustomerNoVisible: Boolean;
                                BilltoNameVisible: Boolean;
                                BilltoAddressVisible: Boolean;
                                BilltoAddress2Visible: Boolean;
                                BilltoPostCodeVisible: Boolean;
                                BilltoCityVisible: Boolean;
                                BilltoContactNoVisible: Boolean;
                                BilltoContactVisible: Boolean;
                                PayatCodeVisible: Boolean;
                                CustBankAccCodeVisible: Boolean;
                                DueDateVisible: Boolean;
                                PaymentTermsCodeVisible: Boolean;
                                PricesIncludingVATVisible: Boolean;
                                OperationDescription: Text[500];
                                TicketBAI: Codeunit "10700";
                                TBAIActivated: Boolean;
                                facturarectificativa: Boolean;
                                Factura3odest: Boolean;
                                FacturaSimplificadaSustituci: Boolean;
                                FacturaSimplificada: Boolean;
                                SerieFacturaAnterior_: Text;
                                NumFacturaAnterior_: Code[20];
                                FechaExpedicionFacturaAnterior_: Text;
                                SignatureValueFirmaFacturaAnterior_: Text;
                                TBAIManagement: Codeunit "10700";
}

